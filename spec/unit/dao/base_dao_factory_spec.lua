local spec_helpers = require "spec.spec_helpers"

spec_helpers.for_each_dao(function(dao_type, default_properties)
  local DAOFactory = require("kong.dao."..dao_type..".dao_factory")
  local DBBaseDAO = require("kong.dao."..dao_type..".dao")

  describe(dao_type.."DAOFactory #dao", function()
    it("should implement required methods", function()
      assert.is_function(DAOFactory.new)
      assert.is_function(DAOFactory.execute_queries)
    end)
    it("should be instanciable", function()
      local dao
      assert.has_no_errors(function()
        dao = DAOFactory(default_properties)
      end)
      assert.is_table(dao)
      assert.True(dao:is(DAOFactory))
    end)
    it("should not accept an empty session_options argument", function()
      assert.has_error(function()
        DAOFactory()
      end)
    end)
    describe("instance", function()
      local dao
      before_each(function()
        dao = DAOFactory(default_properties)
      end)
      it("should have a type attribute", function()
        assert.equal(dao_type, dao.type)
      end)
      it("should have a session_options method", function()
        assert.is_table(dao.session_options)
      end)
      it("should have a properties method", function()
        assert.is_table(dao.properties)
        assert.same(default_properties, dao.properties)
      end)
      it("should have a get_session_options() method", function()
        assert.is_table(dao:get_session_options())
      end)
      it("should have a daos attribute", function()
        assert.is_table(dao.daos)
      end)
      it("should have a DAO for each core entity", function()
        assert.True(dao.daos.apis:is(DBBaseDAO))
        assert.True(dao.daos.consumers:is(DBBaseDAO))
        assert.True(dao.daos.plugins:is(DBBaseDAO))
        assert.True(dao.daos.nodes:is(DBBaseDAO))
      end)
      it("should be possible to access underlying DAOs with a short-hand index method", function()
        assert.truthy(dao.apis)
        assert.truthy(dao.consumers)
        assert.truthy(dao.plugins)
      end)
    end)
  end)
end)
